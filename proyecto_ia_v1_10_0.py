# -*- coding: utf-8 -*-
"""Proyecto-IA v1.10.0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mwj3ulzGoTl4Up3CzdSZcV3SDmyg4MkO

# INICIO DEL PROYECTO
"""

import pandas as pd
import glob
import re
import os
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np

import sklearn.preprocessing as preprocessing
import sklearn.model_selection as model_selection
import sklearn.feature_extraction.text as text
import sklearn.svm as svm
import sklearn.ensemble as ensemble
import sklearn.metrics as metrics
import shutil
import transformers
import torch
import tensorflow as tf
from tensorflow import keras

"""# RECOPILAR DATOS ACADÉMICOS"""

shutil.rmtree('/content/InteligenciaArtificialDataset', ignore_errors=True)

!git clone https://github.com/SaavedraSebastian/InteligenciaArtificialDataset.git

os.chdir('/content/InteligenciaArtificialDataset')

archivos_csv = glob.glob('*.csv')
dataframes = [pd.read_csv(archivo) for archivo in archivos_csv]
df_total = pd.concat(dataframes, ignore_index=True)

df_total.head()

df_total.to_csv('df_total.csv', index=False, encoding='utf-8')
from google.colab import files
files.download('df_total.csv')

df_original = pd.read_csv("df_total.csv")
df_original

df_original.shape

df_original.dtypes

df_original.info()

df_original.describe()

"""# LIMPIAR Y NORMALIZAR DATOS"""

df_original.isnull().sum()

df_original['Fuente'] = df_original['Fuente'].fillna('Red de Ipress Vinculadas')
df_original['Categoría'] = df_original['Categoría'].fillna('Estrategias institucionales')

df_original['Pregunta'] = df_original['Pregunta'].str.strip()
df_original['Respuesta'] = df_original['Respuesta'].str.strip()
df_original['Categoría'] = df_original['Categoría'].str.strip()
df_original['Fuente'] = df_original['Fuente'].str.strip()

df_original

df_original.isnull().sum()

def limpiar_texto(texto):
    texto = str(texto).lower()
    texto = re.sub(r'[^\w\s]', '', texto)
    texto = re.sub(r'\d+', '', texto)
    return texto

df_original['Pregunta_procesada'] = df_original['Pregunta'].apply(limpiar_texto)

"""# ETIQUETAR DATOS PARA ENTRENAMIENTO"""

df_original['Categoría'].unique()

fusion_categorias = {
    'Accesibilidad': 'Tecnología y Acceso',
    'Acceso a la Defensoría': 'Servicios estudiantiles',
    'Accidentes laborales': 'Seguridad y salud',
    'Actividades': 'Gestión académica',
    'Apelaciones': 'Normas disciplinarias',
    'Aplicación': 'Trámites y Procedimientos',
    'Área Responsable': 'Gestión académica',
    'Ámbito de aplicación': 'Generalidades',
    'Asesor de Tesis': 'Tesis y Titulación',
    'Asistencia': 'Evaluación',
    'Asistencia Médica': 'Servicios estudiantiles',
    'Autoridad': 'Gobierno universitario',
    'Autoridades': 'Gobierno universitario',
    'Beneficiario': 'Becas',
    'Beneficiarios': 'Becas',
    'Beneficios': 'Becas',
    'Beneficios para el Usuario': 'Servicios estudiantiles',
    'Beca deportiva': 'Becas',
    'Beca económica': 'Becas',
    'Becas': 'Becas',
    'Becas y beneficios': 'Becas',
    'Becas y descuentos': 'Becas',
    'Bioseguridad': 'Seguridad y salud',
    'Calendario de pagos': 'Financiamiento y Pagos',
    'Capacitación': 'Docencia',
    'Casos Especiales': 'Normas disciplinarias',
    'Categorías docentes': 'Docencia',
    'Centro de formación': 'Prácticas profesionales',
    'Cobranza': 'Financiamiento y Pagos',
    'Coberturas': 'Servicios estudiantiles',
    'Cobertura': 'Servicios estudiantiles',
    'Cobertura Geográfica': 'Servicios estudiantiles',
    'Cobertura Internacional': 'Servicios estudiantiles',
    'Coberturas Especiales': 'Servicios estudiantiles',
    'Comisión': 'Gobierno universitario',
    'Comisiones': 'Gobierno universitario',
    'Compromisos': 'Obligaciones',
    'Competencias': 'Prácticas profesionales',
    'Competencias específicas': 'Prácticas profesionales',
    'Competencias genéricas': 'Prácticas profesionales',
    'Composición': 'Gobierno universitario',
    'Condiciones': 'Obligaciones',
    'Condiciones Especiales': 'Servicios estudiantiles',
    'Condición de estudiante': 'Derechos y deberes',
    'Confidencialidad': 'Obligaciones',
    'Contacto': 'Servicios estudiantiles',
    'Contacto y Acceso': 'Servicios estudiantiles',
    'Contexto formativo': 'Prácticas profesionales',
    'Contratación': 'Docencia',
    'Contratación docente': 'Docencia',
    'Control vehicular': 'Seguridad y salud',
    'Convenio': 'Prácticas profesionales',
    'Créditos': 'Tesis y Titulación',
    'Cronograma de pagos': 'Financiamiento y Pagos',
    'Cuota de Enseñanza': 'Financiamiento y Pagos',
    'Cuotas': 'Financiamiento y Pagos',
    'Cuotas académicas': 'Financiamiento y Pagos',
    'Datos del plan': 'Prácticas profesionales',
    'Definición': 'Generalidades',
    'Definiciones': 'Generalidades',
    'Derechos': 'Derechos y deberes',
    'Derechos docentes': 'Docencia',
    'Derechos estudiantiles': 'Derechos y deberes',
    'Diagnóstico': 'Servicios estudiantiles',
    'Difusión científica': 'Investigación',
    'Disciplina': 'Normas disciplinarias',
    'Documentación': 'Trámites y Procedimientos',
    'Doctorado': 'Tesis y Titulación',
    'Duración': 'Prácticas profesionales',
    'Duración del cargo': 'Gobierno universitario',
    'Duración del proyecto': 'Tesis y Titulación',
    'EPP': 'Seguridad y salud',
    'Elegibilidad': 'Becas',
    'Emergencias': 'Seguridad y salud',
    'Emergencias Odontológicas': 'Servicios estudiantiles',
    'Emergencias Oftalmológicas': 'Servicios estudiantiles',
    'Enseñanza virtual': 'Docencia',
    'Entidades': 'Prácticas profesionales',
    'Estructura': 'Gobierno universitario',
    'Estructura del Repositorio': 'Investigación',
    'Evaluación': 'Evaluación',
    'Evaluación académica': 'Evaluación',
    'Evaluación de proyectos': 'Investigación',
    'Evaluación personal': 'Evaluación',
    'Eventos académicos': 'Investigación',
    'Exoneraciones': 'Financiamiento y Pagos',
    'Faltas': 'Normas disciplinarias',
    'Faltas graves': 'Normas disciplinarias',
    'Faltas leves': 'Normas disciplinarias',
    'Faltas muy graves': 'Normas disciplinarias',
    'Finalidad': 'Generalidades',
    'Fines institucionales': 'Generalidades',
    'Formación investigativa': 'Investigación',
    'Formador': 'Prácticas profesionales',
    'Formas de pago': 'Financiamiento y Pagos',
    'Funciones': 'Gobierno universitario',
    'Funciones del docente': 'Docencia',
    'Gobierno universitario': 'Gobierno universitario',
    'Grupos de investigación': 'Investigación',
    'Homologación': 'Evaluación',
    'Idiomas': 'Gestión académica',
    'Indicadores': 'Evaluación',
    'Información General': 'Generalidades',
    'Informe final': 'Tesis y Titulación',
    'Ingreso de visitantes': 'Seguridad y salud',
    'Ingreso docente': 'Docencia',
    'Jornada formativa': 'Prácticas profesionales',
    'Jornada laboral': 'Docencia',
    'Lugar': 'Gestión académica',
    'Matrícula': 'Gestión académica',
    'Medidas preventivas': 'Seguridad y salud',
    'Medios de pago': 'Financiamiento y Pagos',
    'Modificación': 'Prácticas profesionales',
    'Moras y penalidades': 'Financiamiento y Pagos',
    'Naturaleza del convenio': 'Prácticas profesionales',
    'Naturaleza legal': 'Prácticas profesionales',
    'Normas de debate': 'Gobierno universitario',
    'Nota final': 'Evaluación',
    'Obligaciones': 'Derechos y deberes',
    'Obligaciones de la empresa': 'Prácticas profesionales',
    'Obligaciones del practicante': 'Prácticas profesionales',
    'Obligaciones del trabajador': 'Seguridad y salud',
    'Obligaciones docentes': 'Docencia',
    'Objetivo': 'Generalidades',
    'Objetivos': 'Generalidades',
    'Organización': 'Gobierno universitario',
    'Orientación al Usuario': 'Servicios estudiantiles',
    'Pagos': 'Financiamiento y Pagos',
    'Participantes': 'Prácticas profesionales',
    'Participación': 'Gobierno universitario',
    'Pérdida de beca': 'Becas',
    'Pérdida de condición': 'Derechos y deberes',
    'Permisos': 'Normas disciplinarias',
    'Planes de estudio': 'Gestión académica',
    'Plagio y sanciones': 'Normas disciplinarias',
    'Planificación': 'Docencia',
    'Postulación': 'Docencia',
    'Prevención': 'Seguridad y salud',
    'Procedimiento': 'Trámites y Procedimientos',
    'Procedimiento disciplinario': 'Normas disciplinarias',
    'Programas académicos': 'Gestión académica',
    'Ratificación': 'Docencia',
    'Reanudación de estudios': 'Gestión académica',
    'Recorrido': 'Prácticas profesionales',
    'Recursos': 'Gestión académica',
    'Recursos impugnativos': 'Normas disciplinarias',
    'Red Institucional': 'Gestión académica',
    'Requisitos': 'Trámites y Procedimientos',
    'Requisitos docentes': 'Docencia',
    'Requisitos generales': 'Admisión',
    'Reserva de matrícula': 'Gestión académica',
    'Responsabilidades': 'Derechos y deberes',
    'Responsabilidades del empleador': 'Seguridad y salud',
    'Responsabilidades del trabajador': 'Seguridad y salud',
    'Revisión': 'Evaluación',
    'Retiros y devoluciones': 'Financiamiento y Pagos',
    'Repetición de sustentación': 'Tesis y Titulación',
    'Apoyo Psicológico': 'Servicios estudiantiles',
    'Autenticidad': 'Trámites y Procedimientos',
    'Certificaciones': 'Gestión académica',
    'Cobertura de Transporte': 'Servicios estudiantiles',
    'Comité SST': 'Seguridad y salud',
    'Comité de Tesis': 'Tesis y Titulación',
    'Conceptos Generales': 'Generalidades',
    'Conceptos clave': 'Generalidades',
    'Consecuencias': 'Normas disciplinarias',
    'Constancia': 'Trámites y Procedimientos',
    'Controversias': 'Normas disciplinarias',
    'Convalidaciones': 'Evaluación',
    'Convalidación': 'Evaluación',
    'Costos': 'Financiamiento y Pagos',
    'Deberes': 'Derechos y deberes',
    'Deportes': 'Servicios estudiantiles',
    'Derechos académicos': 'Derechos y deberes',
    'Descanso': 'Seguridad y salud',
    'Descuentos': 'Financiamiento y Pagos',
    'Designación': 'Gobierno universitario',
    'Desvinculación': 'Prácticas profesionales',
    'Devoluciones': 'Financiamiento y Pagos',
    'Direcciones': 'Gobierno universitario',
    'Discapacidad': 'Admisión',
    'Ejes estratégicos': 'Generalidades',
    'Elecciones universitarias': 'Gobierno universitario',
    'Empates': 'Admisión',
    'Estrategias institucionales': 'Generalidades',
    'Exclusiones': 'Normas disciplinarias',
    'Facilidades de pago': 'Financiamiento y Pagos',
    'Faltas y sanciones': 'Normas disciplinarias',
    'Formalización': 'Prácticas profesionales',
    'Fraccionamiento / Apoyo económico': 'Financiamiento y Pagos',
    'Fraccionamiento de pagos': 'Financiamiento y Pagos',
    'Generalidades': 'Generalidades',
    'Gestión': 'Gestión académica',
    'Gestión de becas': 'Becas',
    'Gestión de investigación': 'Investigación',
    'Gestión de pagos': 'Financiamiento y Pagos',
    'Gestión del Repositorio': 'Investigación',
    'Horario': 'Gestión académica',
    'Hostigamiento': 'Normas disciplinarias',
    'Investigación': 'Investigación',
    'Líneas de investigación': 'Investigación',
    'Maestría': 'Tesis y Titulación',
    'Marco normativo': 'Generalidades',
    'Materiales': 'Gestión académica',
    'Matrícula adicional': 'Gestión académica',
    'Misión': 'Generalidades',
    'Modalidad': 'Admisión',
    'Modalidades': 'Admisión',
    'Modalidades de admisión': 'Admisión',
    'Mora': 'Financiamiento y Pagos',
    'Obligaciones de la entidad': 'Prácticas profesionales',
    'Otros derechos académicos': 'Derechos y deberes',
    'PRONABEC': 'Admisión',
    'Partes del convenio': 'Prácticas profesionales',
    'Perfil docente': 'Docencia',
    'Personal de vigilancia': 'Seguridad y salud',
    'Plazos': 'Trámites y Procedimientos',
    'Posgrado': 'Tesis y Titulación',
    'Postulación extranjera': 'Admisión',
    'Preuniversitario': 'Admisión',
    'Principios': 'Generalidades',
    'Programas': 'Gestión académica',
    'Prohibiciones': 'Normas disciplinarias',
    'Promoción': 'Docencia',
    'Propiedad intelectual': 'Investigación',
    'Protección': 'Normas disciplinarias',
    'Protocolos': 'Seguridad y salud',
    'Proyectos de investigación': 'Investigación',
    'Quórum': 'Gobierno universitario',
    'Reclamos': 'Trámites y Procedimientos',
    'Reembolsos': 'Financiamiento y Pagos',
    'Relevancia': 'Generalidades',
    'Renovación de beca': 'Becas',
    'Renuncia': 'Trámites y Procedimientos',
    'Renuncias': 'Trámites y Procedimientos',
    'Requisitos de beca': 'Becas',
    'Requisitos de evaluación': 'Evaluación',
    'Retiro de asignaturas': 'Gestión académica',
    'Retiro de ciclo': 'Gestión académica',
    'Régimen de estudios': 'Gestión académica',
    'Régimen disciplinario': 'Normas disciplinarias',
    'Sanciones': 'Normas disciplinarias',
    'Sanciones académicas': 'Normas disciplinarias',
    'Seguimiento': 'Evaluación',
    'Segunda Especialidad': 'Gestión académica',
    'Segunda profesión': 'Admisión',
    'Seguridad laboral': 'Seguridad y salud',
    'Seguridad y salud': 'Seguridad y salud',
    'Seguro': 'Servicios estudiantiles',
    'Seguro de Accidentes Personales - Menor de Edad': 'Servicios estudiantiles',
    'Seguros': 'Servicios estudiantiles',
    'Separación académica': 'Gestión académica',
    'Separación definitiva': 'Gestión académica',
    'Servicios Médicos': 'Servicios estudiantiles',
    'Servicios adicionales': 'Servicios estudiantiles',
    'Sesiones': 'Gobierno universitario',
    'Sistema de Salud': 'Servicios estudiantiles',
}

df_original['Categoría'] = df_original['Categoría'].replace(fusion_categorias)

print("Número de categorías después de fusión:", df_original['Categoría'].nunique())
print("Categorías finales:", df_original['Categoría'].unique())

from sklearn.preprocessing import LabelEncoder

le = LabelEncoder()

df_original['Categoría_codificada'] = le.fit_transform(df_original['Categoría'])

df_original.head()

list(zip(le.classes_, le.transform(le.classes_)))

"""# SELECCIONAR TÉCNICAS DE PLN"""

# División de datos
X = df_original['Pregunta_procesada']
y = df_original['Categoría_codificada']
X_train, X_test, y_train, y_test = model_selection.train_test_split(X, y, test_size=0.2, random_state=42)

vectorizer = text.TfidfVectorizer()
X_train_vect = vectorizer.fit_transform(X_train)
X_test_vect = vectorizer.transform(X_test)

"""# DESARROLLAR MODELO DE INTENCIÓN Y RESPUESTA"""

# SVM
svm_model = svm.LinearSVC()
svm_model.fit(X_train_vect, y_train)
y_pred_svm = svm_model.predict(X_test_vect)
accuracy_svm = metrics.accuracy_score(y_test, y_pred_svm)
print(f"Accuracy SVM: {accuracy_svm:.4f}")
# Random Forest
rf_model = ensemble.RandomForestClassifier()
rf_model.fit(X_train_vect, y_train)
y_pred_rf = rf_model.predict(X_test_vect)
accuracy_rf = metrics.accuracy_score(y_test, y_pred_rf)
print(f"Accuracy Random Forest: {accuracy_rf:.4f}")
# Red Neuronal
nn_model = keras.Sequential()
nn_model.add(keras.layers.Dense(128, input_shape=(X_train_vect.shape[1],), activation='relu'))
nn_model.add(keras.layers.Dense(64, activation='relu'))
nn_model.add(keras.layers.Dense(len(le.classes_), activation='softmax'))
nn_model.compile(loss='sparse_categorical_crossentropy', optimizer='adam', metrics=['accuracy'])
history = nn_model.fit(X_train_vect.toarray(), y_train, epochs=30, batch_size=32, validation_split=0.2, verbose=0)
nn_pred = nn_model.predict(X_test_vect.toarray())
nn_pred_labels = np.argmax(nn_pred, axis=1)
accuracy_nn = metrics.accuracy_score(y_test, nn_pred_labels)
print(f"Accuracy Red Neuronal: {accuracy_nn:.4f}")

import transformers
print(transformers.__version__)

import os
import transformers
import torch
from transformers import Trainer, TrainingArguments
from sklearn.metrics import accuracy_score

# Definir token Hugging Face directamente (para autenticación opcional)
HF_TOKEN = "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"  # ← Reemplaza con tu token real
os.environ["HF_TOKEN"] = HF_TOKEN

# Configurar la clave API de W&B
os.environ['WANDB_API_KEY'] = '7e6a1d7f5ccbbf3758298eeabe4830d12e7eef80'  # Reemplaza con tu clave API real

# Cargar el tokenizador y el modelo BERT
tokenizer = transformers.BertTokenizer.from_pretrained('bert-base-uncased')
model = transformers.BertForSequenceClassification.from_pretrained('bert-base-uncased', num_labels=len(le.classes_))

# Tokenización y creación de datasets
train_encodings = tokenizer(X_train.tolist(), truncation=True, padding=True, return_tensors="pt")
test_encodings = tokenizer(X_test.tolist(), truncation=True, padding=True, return_tensors="pt")

class CustomDataset(torch.utils.data.Dataset):
    def __init__(self, encodings, labels):
        self.encodings = encodings
        self.labels = labels

    def __getitem__(self, idx):
        item = {key: val[idx].clone().detach() for key, val in self.encodings.items()}
        item['labels'] = torch.tensor(self.labels[idx])
        return item

    def __len__(self):
        return len(self.labels)

# Función de métricas personalizadas
def compute_metrics(eval_pred):
    logits, labels = eval_pred
    preds = np.argmax(logits, axis=1)
    acc = accuracy_score(labels, preds)
    return {'accuracy': acc}

train_dataset = CustomDataset(train_encodings, y_train.values)
test_dataset = CustomDataset(test_encodings, y_test.values)

# Configuración de entrenamiento
training_args = TrainingArguments(
       output_dir='./results',
       run_name='BERT_clasificador_preguntas',
       num_train_epochs=30,
       per_device_train_batch_size=16,
       per_device_eval_batch_size=16,
       warmup_steps=500,
       weight_decay=0.01,
       logging_dir='./logs',
       eval_strategy="epoch",  # Cambiado evaluation_strategy a eval_strategy
       logging_steps=10,
       save_strategy="epoch"
)

trainer = Trainer(
       model=model,
       args=training_args,
       train_dataset=train_dataset,
       eval_dataset=test_dataset,
       compute_metrics=compute_metrics,
)

# Entrenamiento del modelo
trainer.train()

# Evaluación del modelo
results = trainer.evaluate()
print("Resultados de BERT:", results)

"""# REALIZAR PRUEBAS FUNCIONALES Y DE PRECISIÓN"""

bert_accuracy = results.get('eval_accuracy', None)  # Cambia 'eval_accuracy' si es necesario

# Crear el DataFrame para comparar resultados
results_df = pd.DataFrame({
    'Modelo': ['SVM', 'Random Forest', 'Red Neuronal', 'BERT'],
    'Accuracy': [accuracy_svm, accuracy_rf, accuracy_nn, bert_accuracy]  # Usar get para evitar KeyError
})

# Verificar si hay un valor para BERT
if results_df['Accuracy'].isnull().any():
    print("Advertencia: No se pudo obtener la precisión para BERT.")

# Graficar los resultados
ax = results_df.plot(kind='bar', x='Modelo', y='Accuracy', figsize=(10, 6), legend=True)
plt.title('Comparación de Modelos')
plt.ylabel('Precisión')
plt.xticks(rotation=45)
plt.ylim(0, 1)

# Añadir etiquetas de precisión sobre cada barra
for i, acc in enumerate(results_df['Accuracy']):
    plt.text(i, acc + 0.01, f"{acc:.2f}", ha='center', va='bottom', fontsize=10)

plt.show()

from sklearn.metrics import confusion_matrix
from collections import Counter
import seaborn as sns
import matplotlib.pyplot as plt

categorias_decodificadas = le.inverse_transform(y_test)

conteo = Counter(categorias_decodificadas)
categorias_top = [cat for cat, count in conteo.most_common(15)]

indices_top = [i for i, cat in enumerate(categorias_decodificadas) if cat in categorias_top]

y_test_top = y_test.iloc[indices_top]
y_pred_top = [y_pred_svm[i] for i in indices_top]

y_test_top_dec = le.inverse_transform(y_test_top)
y_pred_top_dec = le.inverse_transform(y_pred_top)

# Re-codificar top categorías para matriz
all_categories = list(set(y_test_top_dec).union(set(y_pred_top_dec)))
le_top = preprocessing.LabelEncoder()
le_top.fit(all_categories)
y_test_top_enc = le_top.transform(y_test_top_dec)
y_pred_top_enc = le_top.transform(y_pred_top_dec)

# Matriz de confusión top 15
cm_top = confusion_matrix(y_test_top_enc, y_pred_top_enc)

plt.figure(figsize=(12,10))
sns.heatmap(cm_top, annot=True, fmt='d', cmap='Blues',
            xticklabels=le_top.classes_, yticklabels=le_top.classes_)
plt.title('Matriz de Confusión (Top 15 Categorías) - SVM')
plt.xlabel('Predicción')
plt.ylabel('Real')
plt.tight_layout()
plt.show()

acierto_error = (y_pred_svm == y_test).astype(int)

cm_binaria = confusion_matrix(acierto_error, acierto_error, labels=[1, 0])

plt.figure(figsize=(6,4))
sns.heatmap(cm_binaria, annot=True, fmt='d', cmap='Greens',
            xticklabels=['Acierto', 'Error'], yticklabels=['Acierto', 'Error'])
plt.title('Matriz Binaria Aciertos/Errores - SVM')
plt.xlabel('Predicción')
plt.ylabel('Real')
plt.tight_layout()
plt.show()

from sklearn.metrics.pairwise import cosine_similarity
from sklearn.feature_extraction.text import TfidfVectorizer
import joblib
import torch

def limpiar_texto(texto):
    texto = str(texto).lower()
    texto = re.sub(r'[^\w\s]', '', texto)
    texto = re.sub(r'\d+', '', texto)
    return texto

def predecir_categoria_svm(pregunta, modelo, vectorizador, codificador):
    pregunta_limpia = limpiar_texto(pregunta)
    pregunta_vect = vectorizador.transform([pregunta_limpia])
    pred_cod = modelo.predict(pregunta_vect)[0]
    categoria = codificador.inverse_transform([pred_cod])[0]
    return categoria

def buscar_mejor_respuesta(pregunta, categoria, dataframe, vectorizador):
    preguntas_categoria = dataframe[dataframe['Categoría'] == categoria].copy()
    preguntas_categoria['Pregunta_procesada'] = preguntas_categoria['Pregunta'].apply(limpiar_texto)
    tfidf_matrix = vectorizador.transform(preguntas_categoria['Pregunta_procesada'])
    pregunta_vec = vectorizador.transform([limpiar_texto(pregunta)])
    similitudes = cosine_similarity(pregunta_vec, tfidf_matrix).flatten()
    idx_mejor = similitudes.argmax()
    mejor_respuesta = preguntas_categoria.iloc[idx_mejor]['Respuesta']
    return mejor_respuesta

def asistente_responde_svm(pregunta, modelo, vectorizador, codificador, dataframe):
    categoria = predecir_categoria_svm(pregunta, modelo, vectorizador, codificador)
    respuesta = buscar_mejor_respuesta(pregunta, categoria, dataframe, vectorizador)
    return categoria, respuesta

usuario = "¿Qué es el régimen de estudios en la universidad?"
categoria, respuesta = asistente_responde_svm(usuario, svm_model, vectorizer, le, df_original)
print("Pregunta: ", usuario)
print("Categoría predicha:", categoria)
print("Respuesta encontrada:", respuesta)
print("==========================================================================================")

usuario = "¿Cuál es el horario de atención del área académica?"
categoria, respuesta = asistente_responde_svm(usuario, svm_model, vectorizer, le, df_original)
print("Pregunta: ", usuario)

print("Categoría predicha:", categoria)
print("Respuesta encontrada:", respuesta)
print("==========================================================================================")

usuario = "¿Cómo puedo reservar mi matrícula para el próximo ciclo?"
categoria, respuesta = asistente_responde_svm(usuario, svm_model, vectorizer, le, df_original)
print("Pregunta: ", usuario)
print("Categoría predicha:", categoria)
print("Respuesta encontrada:", respuesta)
print("==========================================================================================")

usuario = "¿Qué documentos necesito para realizar un trámite de convalidación?"
categoria, respuesta = asistente_responde_svm(usuario, svm_model, vectorizer, le, df_original)
print("Pregunta: ", usuario)
print("Categoría predicha:", categoria)
print("Respuesta encontrada:", respuesta)
print("==========================================================================================")

usuario = "¿Dónde solicito mi constancia de estudios?"
categoria, respuesta = asistente_responde_svm(usuario, svm_model, vectorizer, le, df_original)
print("Pregunta: ", usuario)
print("Categoría predicha:", categoria)
print("Respuesta encontrada:", respuesta)
print("==========================================================================================")

usuario = "¿Cómo realizo un reclamo si tengo un problema con mi matrícula?"
categoria, respuesta = asistente_responde_svm(usuario, svm_model, vectorizer, le, df_original)
print("Pregunta: ", usuario)
print("Categoría predicha:", categoria)
print("Respuesta encontrada:", respuesta)
print("==========================================================================================")

usuario = "¿Cómo postulo a una beca económica?"
categoria, respuesta = asistente_responde_svm(usuario, svm_model, vectorizer, le, df_original)
print("Pregunta: ", usuario)
print("Categoría predicha:", categoria)
print("Respuesta encontrada:", respuesta)
print("==========================================================================================")

usuario = "¿Cuál es el proceso para fraccionar los pagos?"
categoria, respuesta = asistente_responde_svm(usuario, svm_model, vectorizer, le, df_original)
print("Pregunta: ", usuario)
print("Categoría predicha:", categoria)
print("Respuesta encontrada:", respuesta)
print("==========================================================================================")

usuario = "¿Qué tipos de descuentos académicos existen?"
categoria, respuesta = asistente_responde_svm(usuario, svm_model, vectorizer, le, df_original)
print("Pregunta: ", usuario)
print("Categoría predicha:", categoria)
print("Respuesta encontrada:", respuesta)
print("==========================================================================================")

usuario = "¿Qué pasos debo seguir para registrar mi proyecto de tesis?"
categoria, respuesta = asistente_responde_svm(usuario, svm_model, vectorizer, le, df_original)
print("Pregunta: ", usuario)
print("Categoría predicha:", categoria)
print("Respuesta encontrada:", respuesta)
print("==========================================================================================")

usuario = "¿Cuál es el rol del asesor de tesis?"
categoria, respuesta = asistente_responde_svm(usuario, svm_model, vectorizer, le, df_original)
print("Pregunta: ", usuario)
print("Categoría predicha:", categoria)
print("Respuesta encontrada:", respuesta)
print("==========================================================================================")

usuario = "¿Qué criterios se evalúan en la sustentación?"
categoria, respuesta = asistente_responde_svm(usuario, svm_model, vectorizer, le, df_original)
print("Pregunta: ", usuario)
print("Categoría predicha:", categoria)
print("Respuesta encontrada:", respuesta)
print("==========================================================================================")

usuario = "¿Cuáles son las faltas graves que se pueden dar?"
categoria, respuesta = asistente_responde_svm(usuario, svm_model, vectorizer, le, df_original)
print("Pregunta: ", usuario)
print("Categoría predicha:", categoria)
print("Respuesta encontrada:", respuesta)
print("==========================================================================================")

usuario = "¿Qué medidas de bioseguridad se aplican en la universidad?"
categoria, respuesta = asistente_responde_svm(usuario, svm_model, vectorizer, le, df_original)
print("Pregunta: ", usuario)
print("Categoría predicha:", categoria)
print("Respuesta encontrada:", respuesta)
print("==========================================================================================")

usuario = "¿Cómo se sanciona el plagio académico?"
categoria, respuesta = asistente_responde_svm(usuario, svm_model, vectorizer, le, df_original)
print("Pregunta: ", usuario)
print("Categoría predicha:", categoria)
print("Respuesta encontrada:", respuesta)
print("==========================================================================================")

usuario = "¿Dónde se encuentra el servicio de atención médica?"
categoria, respuesta = asistente_responde_svm(usuario, svm_model, vectorizer, le, df_original)
print("Pregunta: ", usuario)
print("Categoría predicha:", categoria)
print("Respuesta encontrada:", respuesta)
print("==========================================================================================")

usuario = "¿Qué incluye el seguro estudiantil?"
categoria, respuesta = asistente_responde_svm(usuario, svm_model, vectorizer, le, df_original)
print("Pregunta: ", usuario)
print("Categoría predicha:", categoria)
print("Respuesta encontrada:", respuesta)
print("==========================================================================================")

usuario = "¿La universidad ofrece apoyo psicológico?"
categoria, respuesta = asistente_responde_svm(usuario, svm_model, vectorizer, le, df_original)
print("Pregunta: ", usuario)
print("Categoría predicha:", categoria)
print("Respuesta encontrada:", respuesta)
print("==========================================================================================")

usuario = "¿Qué requisitos debo cumplir para postular por PRONABEC?"
categoria, respuesta = asistente_responde_svm(usuario, svm_model, vectorizer, le, df_original)
print("Pregunta: ", usuario)
print("Categoría predicha:", categoria)
print("Respuesta encontrada:", respuesta)
print("==========================================================================================")

usuario = "¿Puedo ingresar mediante la modalidad de segunda profesión?"
categoria, respuesta = asistente_responde_svm(usuario, svm_model, vectorizer, le, df_original)
print("Pregunta: ", usuario)
print("Categoría predicha:", categoria)
print("Respuesta encontrada:", respuesta)
print("==========================================================================================")

usuario = "¿Cómo puedo solicitar una beca de excelencia académica?"
categoria, respuesta = asistente_responde_svm(usuario, svm_model, vectorizer, le, df_original)
print("Pregunta: ", usuario)
print("Categoría predicha:", categoria)
print("Respuesta encontrada:", respuesta)
print("==========================================================================================")

usuario = "¿Qué requisitos debo cumplir para acceder al programa de movilidad estudiantil?"
categoria, respuesta = asistente_responde_svm(usuario, svm_model, vectorizer, le, df_original)
print("Pregunta: ", usuario)
print("Categoría predicha:", categoria)
print("Respuesta encontrada:", respuesta)
print("==========================================================================================")

usuario = "¿Dónde puedo obtener información sobre los cursos de verano?"
categoria, respuesta = asistente_responde_svm(usuario, svm_model, vectorizer, le, df_original)
print("Pregunta: ", usuario)
print("Categoría predicha:", categoria)
print("Respuesta encontrada:", respuesta)
print("==========================================================================================")

usuario = "¿Cuál es el procedimiento para solicitar una constancia de notas?"
categoria, respuesta = asistente_responde_svm(usuario, svm_model, vectorizer, le, df_original)
print("Pregunta: ", usuario)
print("Categoría predicha:", categoria)
print("Respuesta encontrada:", respuesta)
print("==========================================================================================")

usuario = "¿Cómo puedo cambiarme de carrera dentro de la universidad?"
categoria, respuesta = asistente_responde_svm(usuario, svm_model, vectorizer, le, df_original)
print("Pregunta: ", usuario)
print("Categoría predicha:", categoria)
print("Respuesta encontrada:", respuesta)
print("==========================================================================================")

usuario = "¿Qué debo hacer si perdí mi carné universitario?"
categoria, respuesta = asistente_responde_svm(usuario, svm_model, vectorizer, le, df_original)
print("Pregunta: ", usuario)
print("Categoría predicha:", categoria)
print("Respuesta encontrada:", respuesta)
print("==========================================================================================")

usuario = "¿Dónde puedo ver el calendario académico del próximo semestre?"
categoria, respuesta = asistente_responde_svm(usuario, svm_model, vectorizer, le, df_original)
print("Pregunta: ", usuario)
print("Categoría predicha:", categoria)
print("Respuesta encontrada:", respuesta)
print("==========================================================================================")

usuario = "¿Qué opciones de financiamiento existen para los estudiantes?"
categoria, respuesta = asistente_responde_svm(usuario, svm_model, vectorizer, le, df_original)
print("Pregunta: ", usuario)
print("Categoría predicha:", categoria)
print("Respuesta encontrada:", respuesta)
print("==========================================================================================")

usuario = "¿Cómo puedo acceder a los servicios de salud mental en la universidad?"
categoria, respuesta = asistente_responde_svm(usuario, svm_model, vectorizer, le, df_original)
print("Pregunta: ", usuario)
print("Categoría predicha:", categoria)
print("Respuesta encontrada:", respuesta)
print("==========================================================================================")

usuario = "¿Cuál es el proceso para solicitar una prórroga de matrícula?"
categoria, respuesta = asistente_responde_svm(usuario, svm_model, vectorizer, le, df_original)
print("Pregunta: ", usuario)
print("Categoría predicha:", categoria)
print("Respuesta encontrada:", respuesta)
print("==========================================================================================")

usuario = "¿Qué debo hacer para inscribirme en actividades extracurriculares?"
categoria, respuesta = asistente_responde_svm(usuario, svm_model, vectorizer, le, df_original)
print("Pregunta: ", usuario)
print("Categoría predicha:", categoria)
print("Respuesta encontrada:", respuesta)
print("==========================================================================================")

usuario = "¿Dónde puedo encontrar información sobre las prácticas profesionales?"
categoria, respuesta = asistente_responde_svm(usuario, svm_model, vectorizer, le, df_original)
print("Pregunta: ", usuario)
print("Categoría predicha:", categoria)
print("Respuesta encontrada:", respuesta)
print("==========================================================================================")

usuario = "¿Cómo puedo acceder a la biblioteca virtual de la universidad?"
categoria, respuesta = asistente_responde_svm(usuario, svm_model, vectorizer, le, df_original)
print("Pregunta: ", usuario)
print("Categoría predicha:", categoria)
print("Respuesta encontrada:", respuesta)
print("==========================================================================================")

usuario = "¿Qué servicios ofrece la oficina de orientación vocacional?"
categoria, respuesta = asistente_responde_svm(usuario, svm_model, vectorizer, le, df_original)
print("Pregunta: ", usuario)
print("Categoría predicha:", categoria)
print("Respuesta encontrada:", respuesta)
print("==========================================================================================")

usuario = "¿Cómo puedo solicitar una revisión de examen?"
categoria, respuesta = asistente_responde_svm(usuario, svm_model, vectorizer, le, df_original)
print("Pregunta: ", usuario)
print("Categoría predicha:", categoria)
print("Respuesta encontrada:", respuesta)
print("==========================================================================================")

usuario = "¿Qué pasos debo seguir para realizar una transferencia externa?"
categoria, respuesta = asistente_responde_svm(usuario, svm_model, vectorizer, le, df_original)
print("Pregunta: ", usuario)
print("Categoría predicha:", categoria)
print("Respuesta encontrada:", respuesta)
print("==========================================================================================")

usuario = "¿Dónde puedo obtener información sobre los programas de posgrado?"
categoria, respuesta = asistente_responde_svm(usuario, svm_model, vectorizer, le, df_original)
print("Pregunta: ", usuario)
print("Categoría predicha:", categoria)
print("Respuesta encontrada:", respuesta)
print("==========================================================================================")

usuario = "¿Qué debo hacer si tengo problemas con mi correo institucional?"
categoria, respuesta = asistente_responde_svm(usuario, svm_model, vectorizer, le, df_original)
print("Pregunta: ", usuario)
print("Categoría predicha:", categoria)
print("Respuesta encontrada:", respuesta)
print("==========================================================================================")

usuario = "¿Cómo puedo participar en los programas de voluntariado universitario?"
categoria, respuesta = asistente_responde_svm(usuario, svm_model, vectorizer, le, df_original)
print("Pregunta: ", usuario)
print("Categoría predicha:", categoria)
print("Respuesta encontrada:", respuesta)
print("==========================================================================================")

usuario = "¿Cuál es el procedimiento para solicitar una beca de investigación?"
categoria, respuesta = asistente_responde_svm(usuario, svm_model, vectorizer, le, df_original)
print("Pregunta: ", usuario)
print("Categoría predicha:", categoria)
print("Respuesta encontrada:", respuesta)
print("==========================================================================================")

usuario = "¿Cómo puedo ver mis notas finales del semestre?"
categoria, respuesta = asistente_responde_svm(usuario, svm_model, vectorizer, le, df_original)
print("Pregunta: ", usuario)
print("Categoría predicha:", categoria)
print("Respuesta encontrada:", respuesta)
print("==========================================================================================")

usuario = "¿Qué sucede si pierdo una clase por emergencia médica?"
categoria, respuesta = asistente_responde_svm(usuario, svm_model, vectorizer, le, df_original)
print("Pregunta: ", usuario)
print("Categoría predicha:", categoria)
print("Respuesta encontrada:", respuesta)
print("==========================================================================================")

usuario = "¿Cuándo es el proceso de matrícula para el siguiente ciclo?"
categoria, respuesta = asistente_responde_svm(usuario, svm_model, vectorizer, le, df_original)
print("Pregunta: ", usuario)
print("Categoría predicha:", categoria)
print("Respuesta encontrada:", respuesta)
print("==========================================================================================")

usuario = "¿Dónde puedo reportar un caso de acoso académico?"
categoria, respuesta = asistente_responde_svm(usuario, svm_model, vectorizer, le, df_original)
print("Pregunta: ", usuario)
print("Categoría predicha:", categoria)
print("Respuesta encontrada:", respuesta)
print("==========================================================================================")

usuario = "¿Qué beneficios tiene el seguro universitario?"
categoria, respuesta = asistente_responde_svm(usuario, svm_model, vectorizer, le, df_original)
print("Pregunta: ", usuario)
print("Categoría predicha:", categoria)
print("Respuesta encontrada:", respuesta)
print("==========================================================================================")

usuario = "¿Qué tipos de movilidad estudiantil ofrece la universidad?"
categoria, respuesta = asistente_responde_svm(usuario, svm_model, vectorizer, le, df_original)
print("Pregunta: ", usuario)
print("Categoría predicha:", categoria)
print("Respuesta encontrada:", respuesta)
print("==========================================================================================")

usuario = "¿Dónde se publican los horarios de clases?"
categoria, respuesta = asistente_responde_svm(usuario, svm_model, vectorizer, le, df_original)
print("Pregunta: ", usuario)
print("Categoría predicha:", categoria)
print("Respuesta encontrada:", respuesta)
print("==========================================================================================")

usuario = "¿Cómo solicito la devolución por pagos indebidos?"
categoria, respuesta = asistente_responde_svm(usuario, svm_model, vectorizer, le, df_original)
print("Pregunta: ", usuario)
print("Categoría predicha:", categoria)
print("Respuesta encontrada:", respuesta)
print("==========================================================================================")

usuario = "¿Cuáles son las medidas de seguridad en los laboratorios?"
categoria, respuesta = asistente_responde_svm(usuario, svm_model, vectorizer, le, df_original)
print("Pregunta: ", usuario)
print("Categoría predicha:", categoria)
print("Respuesta encontrada:", respuesta)
print("==========================================================================================")

usuario = "¿Qué hago si tengo problemas con la plataforma virtual?"
categoria, respuesta = asistente_responde_svm(usuario, svm_model, vectorizer, le, df_original)
print("Pregunta: ", usuario)
print("Categoría predicha:", categoria)
print("Respuesta encontrada:", respuesta)
print("==========================================================================================")

usuario = "¿Qué documentos necesito para una transferencia externa?"
categoria, respuesta = asistente_responde_svm(usuario, svm_model, vectorizer, le, df_original)
print("Pregunta: ", usuario)
print("Categoría predicha:", categoria)
print("Respuesta encontrada:", respuesta)
print("==========================================================================================")

usuario = "¿Cómo accedo al servicio de tutoría académica?"
categoria, respuesta = asistente_responde_svm(usuario, svm_model, vectorizer, le, df_original)
print("Pregunta: ", usuario)
print("Categoría predicha:", categoria)
print("Respuesta encontrada:", respuesta)
print("==========================================================================================")

usuario = "¿Qué ocurre si no sustento mi tesis en la fecha indicada?"
categoria, respuesta = asistente_responde_svm(usuario, svm_model, vectorizer, le, df_original)
print("Pregunta: ", usuario)
print("Categoría predicha:", categoria)
print("Respuesta encontrada:", respuesta)
print("==========================================================================================")

usuario = "¿La universidad tiene servicios para personas con discapacidad?"
categoria, respuesta = asistente_responde_svm(usuario, svm_model, vectorizer, le, df_original)
print("Pregunta: ", usuario)
print("Categoría predicha:", categoria)
print("Respuesta encontrada:", respuesta)
print("==========================================================================================")

usuario = "¿Qué pasa si me retiro del ciclo después de matricularme?"
categoria, respuesta = asistente_responde_svm(usuario, svm_model, vectorizer, le, df_original)
print("Pregunta: ", usuario)
print("Categoría predicha:", categoria)
print("Respuesta encontrada:", respuesta)
print("==========================================================================================")

usuario = "¿Dónde puedo acceder a asesoría para elaborar mi tesis?"
categoria, respuesta = asistente_responde_svm(usuario, svm_model, vectorizer, le, df_original)
print("Pregunta: ", usuario)
print("Categoría predicha:", categoria)
print("Respuesta encontrada:", respuesta)
print("==========================================================================================")

usuario = "¿Existen sanciones por copiar en los exámenes?"
categoria, respuesta = asistente_responde_svm(usuario, svm_model, vectorizer, le, df_original)
print("Pregunta: ", usuario)
print("Categoría predicha:", categoria)
print("Respuesta encontrada:", respuesta)
print("==========================================================================================")

usuario = "¿Cómo solicito una constancia de egresado?"
categoria, respuesta = asistente_responde_svm(usuario, svm_model, vectorizer, le, df_original)
print("Pregunta: ", usuario)
print("Categoría predicha:", categoria)
print("Respuesta encontrada:", respuesta)
print("==========================================================================================")

usuario = "¿Cuáles son los requisitos para prácticas en el extranjero?"
categoria, respuesta = asistente_responde_svm(usuario, svm_model, vectorizer, le, df_original)
print("Pregunta: ", usuario)
print("Categoría predicha:", categoria)
print("Respuesta encontrada:", respuesta)
print("==========================================================================================")

usuario = "¿Qué debo hacer si pierdo la beca por bajo rendimiento?"
categoria, respuesta = asistente_responde_svm(usuario, svm_model, vectorizer, le, df_original)
print("Pregunta: ", usuario)
print("Categoría predicha:", categoria)
print("Respuesta encontrada:", respuesta)
print("==========================================================================================")

usuario = "¿Cómo puedo tramitar una constancia de matrícula?"
categoria, respuesta = asistente_responde_svm(usuario, svm_model, vectorizer, le, df_original)
print("Pregunta: ", usuario)
print("Categoría predicha:", categoria)
print("Respuesta encontrada:", respuesta)
print("==========================================================================================")

usuario = "¿Qué condiciones se deben cumplir para un traslado externo?"
categoria, respuesta = asistente_responde_svm(usuario, svm_model, vectorizer, le, df_original)
print("Pregunta: ", usuario)
print("Categoría predicha:", categoria)
print("Respuesta encontrada:", respuesta)
print("==========================================================================================")

usuario = "¿Dónde puedo acceder al reglamento de prácticas profesionales?"
categoria, respuesta = asistente_responde_svm(usuario, svm_model, vectorizer, le, df_original)
print("Pregunta: ", usuario)
print("Categoría predicha:", categoria)
print("Respuesta encontrada:", respuesta)
print("==========================================================================================")

usuario = "¿Qué tipos de becas ofrece la universidad?"
categoria, respuesta = asistente_responde_svm(usuario, svm_model, vectorizer, le, df_original)
print("Pregunta: ", usuario)
print("Categoría predicha:", categoria)
print("Respuesta encontrada:", respuesta)
print("==========================================================================================")

usuario = "¿Cómo reporto una falta disciplinaria?"
categoria, respuesta = asistente_responde_svm(usuario, svm_model, vectorizer, le, df_original)
print("Pregunta: ", usuario)
print("Categoría predicha:", categoria)
print("Respuesta encontrada:", respuesta)
print("==========================================================================================")

usuario = "¿Cuál es la duración de una práctica profesional?"
categoria, respuesta = asistente_responde_svm(usuario, svm_model, vectorizer, le, df_original)
print("Pregunta: ", usuario)
print("Categoría predicha:", categoria)
print("Respuesta encontrada:", respuesta)
print("==========================================================================================")

usuario = "¿Qué opciones tengo si no puedo pagar a tiempo?"
categoria, respuesta = asistente_responde_svm(usuario, svm_model, vectorizer, le, df_original)
print("Pregunta: ", usuario)
print("Categoría predicha:", categoria)
print("Respuesta encontrada:", respuesta)
print("==========================================================================================")

usuario = "¿Qué debo hacer si quiero cambiar de carrera?"
categoria, respuesta = asistente_responde_svm(usuario, svm_model, vectorizer, le, df_original)
print("Pregunta: ", usuario)
print("Categoría predicha:", categoria)
print("Respuesta encontrada:", respuesta)
print("==========================================================================================")

usuario = "¿Cuál es el rol del vicerrectorado académico?"
categoria, respuesta = asistente_responde_svm(usuario, svm_model, vectorizer, le, df_original)
print("Pregunta: ", usuario)
print("Categoría predicha:", categoria)
print("Respuesta encontrada:", respuesta)
print("==========================================================================================")

usuario = "¿Dónde puedo ver el cronograma de pagos?"
categoria, respuesta = asistente_responde_svm(usuario, svm_model, vectorizer, le, df_original)
print("Pregunta: ", usuario)
print("Categoría predicha:", categoria)
print("Respuesta encontrada:", respuesta)
print("==========================================================================================")

usuario = "¿En qué casos puedo solicitar suspensión de estudios?"
categoria, respuesta = asistente_responde_svm(usuario, svm_model, vectorizer, le, df_original)
print("Pregunta: ", usuario)
print("Categoría predicha:", categoria)
print("Respuesta encontrada:", respuesta)
print("==========================================================================================")

usuario = "¿Qué servicios tecnológicos ofrece la universidad?"
categoria, respuesta = asistente_responde_svm(usuario, svm_model, vectorizer, le, df_original)
print("Pregunta: ", usuario)
print("Categoría predicha:", categoria)
print("Respuesta encontrada:", respuesta)
print("==========================================================================================")

usuario = "¿Puedo repetir la sustentación de tesis si no apruebo?"
categoria, respuesta = asistente_responde_svm(usuario, svm_model, vectorizer, le, df_original)
print("Pregunta: ", usuario)
print("Categoría predicha:", categoria)
print("Respuesta encontrada:", respuesta)
print("==========================================================================================")

usuario = "¿Cómo solicito una beca por rendimiento académico?"
categoria, respuesta = asistente_responde_svm(usuario, svm_model, vectorizer, le, df_original)
print("Pregunta: ", usuario)
print("Categoría predicha:", categoria)
print("Respuesta encontrada:", respuesta)
print("==========================================================================================")

usuario = "¿Qué responsabilidades tiene un docente?"
categoria, respuesta = asistente_responde_svm(usuario, svm_model, vectorizer, le, df_original)
print("Pregunta: ", usuario)
print("Categoría predicha:", categoria)
print("Respuesta encontrada:", respuesta)
print("==========================================================================================")

usuario = "¿Cuáles son los requisitos para titularme?"
categoria, respuesta = asistente_responde_svm(usuario, svm_model, vectorizer, le, df_original)
print("Pregunta: ", usuario)
print("Categoría predicha:", categoria)
print("Respuesta encontrada:", respuesta)
print("==========================================================================================")

usuario = "¿Qué acciones se toman en caso de emergencia médica?"
categoria, respuesta = asistente_responde_svm(usuario, svm_model, vectorizer, le, df_original)
print("Pregunta: ", usuario)
print("Categoría predicha:", categoria)
print("Respuesta encontrada:", respuesta)
print("==========================================================================================")

usuario = "¿Cómo me inscribo en un programa de segunda especialidad?"
categoria, respuesta = asistente_responde_svm(usuario, svm_model, vectorizer, le, df_original)
print("Pregunta: ", usuario)
print("Categoría predicha:", categoria)
print("Respuesta encontrada:", respuesta)
print("==========================================================================================")

usuario = "¿Cuál es el procedimiento para renunciar a una beca?"
categoria, respuesta = asistente_responde_svm(usuario, svm_model, vectorizer, le, df_original)
print("Pregunta: ", usuario)
print("Categoría predicha:", categoria)
print("Respuesta encontrada:", respuesta)
print("==========================================================================================")

usuario = "¿Qué es la supervisión académica en prácticas?"
categoria, respuesta = asistente_responde_svm(usuario, svm_model, vectorizer, le, df_original)
print("Pregunta: ", usuario)
print("Categoría predicha:", categoria)
print("Respuesta encontrada:", respuesta)
print("==========================================================================================")

import joblib

joblib.dump(svm_model, "svm_model.pkl")
joblib.dump(vectorizer, "tfidf_vectorizer.pkl")
joblib.dump(le, "label_encoder.pkl")

from google.colab import files
files.download("svm_model.pkl")
files.download("tfidf_vectorizer.pkl")
files.download("label_encoder.pkl")

!pip install -q fastapi uvicorn nest-asyncio pyngrok scikit-learn pandas

import nest_asyncio
import uvicorn
from fastapi import FastAPI
from pydantic import BaseModel
import joblib
import pandas as pd
import re
from sklearn.metrics.pairwise import cosine_similarity
from pyngrok import ngrok
from fastapi.middleware.cors import CORSMiddleware

nest_asyncio.apply()

from google.colab import files
uploaded = files.upload()

model = joblib.load("svm_model.pkl")
vectorizer = joblib.load("tfidf_vectorizer.pkl")
le = joblib.load("label_encoder.pkl")
df = pd.read_csv("df_total.csv")

def limpiar_texto(texto):
    texto = str(texto).lower()
    texto = re.sub(r'[^\w\s]', '', texto)
    texto = re.sub(r'\d+', '', texto)
    return texto

def buscar_mejor_respuesta(pregunta, categoria, dataframe, vectorizador):
    preguntas_categoria = dataframe[dataframe['Categoría'] == categoria].copy()
    preguntas_categoria['Pregunta_procesada'] = preguntas_categoria['Pregunta'].apply(limpiar_texto)
    tfidf_matrix = vectorizer.transform(preguntas_categoria['Pregunta_procesada'])
    pregunta_vec = vectorizer.transform([limpiar_texto(pregunta)])
    similitudes = cosine_similarity(pregunta_vec, tfidf_matrix).flatten()
    idx_mejor = similitudes.argmax()
    mejor_respuesta = preguntas_categoria.iloc[idx_mejor]['Respuesta']
    return mejor_respuesta

class Pregunta(BaseModel):
    texto: str

app = FastAPI()

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # O usa ["http://127.0.0.1:5500"] si usas Live Server
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

@app.post("/preguntar")
def responder(pregunta: Pregunta):
    pregunta_limpia = limpiar_texto(pregunta.texto)
    pregunta_vect = vectorizer.transform([pregunta_limpia])
    pred_cod = model.predict(pregunta_vect)[0]
    categoria = le.inverse_transform([pred_cod])[0]
    respuesta = buscar_mejor_respuesta(pregunta.texto, categoria, df, vectorizer)
    return {"categoria": categoria, "respuesta": respuesta}

# Autenticar ngrok (reemplaza "YOUR_AUTHTOKEN" con tu token real)
ngrok.set_auth_token("2yv2EbTEK5nWdOlEiqFUXZ99gGl_2QtLBX5aLBxZvdgVmFVNy")

# Exponer con ngrok
public_url = ngrok.connect(8000)
print(f"Tu API está disponible en: {public_url}/preguntar")

uvicorn.run(app, host="0.0.0.0", port=8000)